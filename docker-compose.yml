#backend web application, scale this with docker-compose scale web=3
# web:
#     image: liberalman/helloworld:latest
#     environment:
#       SERVICE_80_NAME: my-web-server
#       SERVICE_TAGS: my-web-server
#       MY_HOST: my-web-server
#     # ports:
#     # - "80:80"

mywebapp:
    image: node:latest
    environment:
        SERVICE_NAME: pos-calc-api
        SERVICE_TAGS: pos-calc-api
    volumes:
        - ./pos-calc-api:/app/pos-calc-api
    working_dir: /app/pos-calc-api/
    expose:
        - "8180"
    # restart: always
    command: ["/bin/sh", "-c", "export NODE_ENV=prd&&node app.js"]

#load balancer will automatically update the config using consul-template
loadbalancer:
    image: 192.168.12.35:5000/nginx-consul-template:latest
    hostname: lb
    environment:
        - consul_server_ip=consul
        - app_name=pos-calc-api
    links:
    - consulserver:consul
    ports:
    - "8180:80"

consulserver:
    image: progrium/consul:latest
    environment:
        SERVICE_TAGS: consul servers
    hostname: consulserver
    ports:
    - "8300"
    - "8400"
    - "8500:8500"
    - "53"
    command: -server -ui-dir /ui -data-dir /tmp/consul -bootstrap-expect 1

# listen on local docker sock to register the container with public ports to the consul service
registrator:
    image: gliderlabs/registrator:latest
    hostname: registrator-1
    links:
    - consulserver:consul
    volumes:
    - "/var/run/docker.sock:/tmp/docker.sock"
    command: -internal consul://consul:8500
    # command: -ip 192.168.2.121 consul://192.168.2.121:8500

# docker-compose up -d --scale mywebapp=3  